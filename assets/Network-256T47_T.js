var O=Object.defineProperty;var F=(g,e,t)=>e in g?O(g,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):g[e]=t;var o=(g,e,t)=>F(g,typeof e!="symbol"?e+"":e,t);import{e as D,b as V,a as j,m as B,c as H,A as x,B as m,d as q}from"./common-CHMphJEB.js";class Q{constructor(e){o(this,"interval",null);o(this,"animationSpeed",1e3);o(this,"animationSpeedChange",1e3);o(this,"currentAnimationStateNumber",0);o(this,"pathColor","#c00000ff");o(this,"normalNodeColor","white");o(this,"normalEdgeColor","black");o(this,"queueNodeColor","#2e77ffff");o(this,"stackNodeColor","#2e77ffff");o(this,"deselectedEdgeColor","#d1d1d1ff");o(this,"selectedEdgeColor","blue");o(this,"visitedNodeColor","orange");o(this,"animationPhase","running");o(this,"states",null);o(this,"stateRenderings",null);o(this,"network");this.network=e}setAnimationSpeedChange(e){this.animationSpeedChange=e}setAnimationStates(e){this.states=e,this.stateRenderings=this.createStateRenderingsFromStates(this.states),this.currentAnimationStateNumber=-1}escapeAnimation(){this.pause(),this.resetGraph(),this.clearInfoBox(),this.currentAnimationStateNumber=-1}setAnimationStateForward(){this.animationPhase==="paused"&&this.moveAnimationStateForward()}setAnimationStateBackward(){this.animationPhase==="paused"&&(this.currentAnimationStateNumber<=0||this.currentAnimationStateNumber--)}setAnimationPhase(e){this.animationPhase=e,D(this.animationPhase)}continueAnimation(){this.states&&(this.setAnimationPhase("running"),this.interval=setInterval(()=>{if(this.animationSpeed!==this.animationSpeedChange)this.animationSpeed=this.animationSpeedChange,clearInterval(this.interval),this.continueAnimation();else if(this.moveAnimationStateForward(),this.animateCurrentState(),this.isLastState()){clearInterval(this.interval),this.setAnimationPhase("paused"),V(j),B(H);return}},this.animationSpeed))}pause(){this.setAnimationPhase("paused"),clearInterval(this.interval)}start(){this.setAnimationPhase("running"),this.continueAnimation()}resetAnimation(){this.pause(),this.currentAnimationStateNumber=0,this.animateCurrentState()}animateCurrentState(){if(this.currentAnimationStateNumber===-1)return;const e=this.states[this.currentAnimationStateNumber],t=this.stateRenderings[this.currentAnimationStateNumber];this.network.updateNodes(t.nodeUpdates),this.network.updateEdges(t.edgeUpdates),this.renderInfoBox(e.algorithmInfobox)}createStateRenderingsFromStates(e){const t=[];for(const s of e)t.push(this.createStateRenderingFromState(s));return t}createStateRenderingFromState(e){const t=[];for(const i of e.nodes){if(!i)continue;let n;switch(i.state){case"visitedNode":n=this.visitedNodeColor;break;case"normal":n=this.normalNodeColor;break;case"partOfPath":n=this.pathColor;break;case"inQueue":n=this.queueNodeColor;break;case"inStack":n=this.stackNodeColor;break;default:n=this.normalNodeColor;break}t.push({id:i.id,label:i.label,color:n})}const s=[];for(const i of e.edges){if(!i)continue;let n,a=2;switch(i.state){case"selectedEdge":n=this.selectedEdgeColor,a=3;break;case"normal":n=this.normalEdgeColor;break;case"partOfPath":n=this.pathColor,a=4;break;case"deselectedEdge":n=this.deselectedEdgeColor;break;default:n=this.normalEdgeColor;break}s.push({id:i.id,color:n,width:a})}return{edgeUpdates:s,nodeUpdates:t}}renderInfoBox(e){if(e){if(x.innerHTML="",e.information){const t=document.createElement("div");t.id="info-text",t.innerHTML=e.information,x.appendChild(t)}if(e.dataStructure){const{type:t,ds:s}=e.dataStructure,i=document.createElement("div"),n=document.createElement("h3");n.textContent=t,n.className="ds-name",i.id="ds-container",i.className=t,x.appendChild(n);for(let a=0;a<s.length;a++)if(s[a]){const r=document.createElement("div");r.className="ds-box",r.textContent=s[a],i.appendChild(r)}if(x.appendChild(i),t==="queue"||t==="priority-queue"){const a=document.createElement("div");a.id="queue-label",a.innerHTML="<span>Front</span><span>Back</span>",x.appendChild(a)}if(t==="stack"){const a=document.createElement("div");a.id="stack-label",a.innerHTML="<span>Bottom</span>",x.appendChild(a)}}}}moveAnimationStateForward(){this.isLastState()||this.currentAnimationStateNumber++}clearInfoBox(){x.innerHTML=""}isLastState(){return this.currentAnimationStateNumber===this.states.length-1}resetGraph(){this.network.resetGraphToOriginal()}}class G{constructor(e){o(this,"capacity");o(this,"items");o(this,"front");o(this,"rear");o(this,"size");this.capacity=e,this.items=new Array(e).fill(null),this.front=0,this.rear=-1,this.size=0}isFull(){return this.size===this.capacity}isEmpty(){return this.size===0}getSize(){return this.size}enqueue(e){this.isFull()||(this.rear=(this.rear+1)%this.capacity,this.items[this.rear]=e,this.size++)}dequeue(){if(this.isEmpty())return null;const e=this.items[this.front];return this.items[this.front]=null,this.front=(this.front+1)%this.capacity,this.size--,e}peek(){return this.isEmpty()?null:this.items[this.front]}toArray(){if(this.isEmpty())return[];const e=[];let t=this.size,s=this.front;for(;t>0;)this.items[s]!==null&&(e.push(this.items[s]),t--),s=(s+1)%this.capacity;return e}}class _{constructor(e){o(this,"arr");o(this,"size",0);this.arr=new Array(e).fill(null)}insert(e){let t=0;for(;t<this.size&&this.arr[t].value<=e.value;)t++;for(let s=this.size;s>t;s--)this.arr[s]=this.arr[s-1];this.arr[t]=e,this.size++}extractMin(){if(this.size===0)return null;const e=this.arr[0];for(let t=0;t<this.size-1;t++)this.arr[t]=this.arr[t+1];return this.arr[this.size-1]=null,this.size--,e}update(e,t){let s=-1;for(let n=0;n<this.size;n++)if(this.arr[n].id===e){s=n;break}if(s===-1)return;const i=this.arr[s];for(let n=s;n<this.size-1;n++)this.arr[n]=this.arr[n+1];this.arr[this.size-1]=null,this.size--,i.value=t,this.insert(i)}get(e){for(let t=0;t<this.size;t++)if(this.arr[t].id===e)return this.arr[t];return null}isEmpty(){return this.size===0}toArray(){const e=new Array(this.size).fill(0);for(let t=0;t<this.size;t++)e[t]=this.arr[t].id;return e}}class R{constructor(){o(this,"nodes");o(this,"edges");o(this,"i",1);o(this,"numberOfNodes",0);this.nodes=Array(200).fill(null),this.edges=Array(200).fill(null)}getNumberOfNodes(){return this.numberOfNodes}addNode(){let e=this.nodes.findIndex(s=>s===null);e===-1&&(e=this.nodes.length);const t=`${this.i++}`;return this.nodes[e]=new z(t,e),this.numberOfNodes++,e}addNodeFromPreset(e,t,s,i){const n=`${this.i++}`,a=new z(n,e);a.color=i,a.x=t,a.y=s,this.nodes[e]=a,this.numberOfNodes++}getEdgeList(){return this.edges}addEdge(e,t,s=!0){if(e===t||this.nodes[e].hasNeighbour(t))return;let i=this.edges.findIndex(n=>n===null);return i===-1&&(i=this.edges.length),this.nodes[e].addNeighbour(t,i),s&&this.nodes[t].addNeighbour(e,i),this.edges[i]=new L(i,t,e),i}removeEdge(e,t,s=!0){const i=this.nodes[e].getAdjacencyList()[t];i!==-1&&(this.nodes[e].removeNeighbour(t),s&&this.nodes[t].removeNeighbour(e),this.edges[i]=null)}deleteNode(e){var i;const t=this.nodes[e];if(!t)return;const s=t.getAdjacencyList();for(let n=0;n<s.length;n++){if(this.nodes[n]!==null&&((i=this.nodes[n])!=null&&i.hasNeighbour(e))){const a=this.nodes[n].getAdjacencyList()[e];this.edges[a]=null,this.nodes[n].removeNeighbour(e)}s[n]!==-1&&(this.edges[s[n]]=null)}this.nodes[e]=null,this.numberOfNodes--}getEdgeListOfNode(e){const t=this.nodes[e];if(!t)return[];const s=t.getAdjacencyList(),i=[];for(let n=0;n<s.length;n++){const a=s[n];if(a!==-1)i.push(a);else if(this.nodes[n]!==null){const h=this.nodes[n].getAdjacencyList()[e];h!==-1&&i.push(h)}}return i}getLabelOfNode(e){return this.nodes[e].label}getNode(e){return this.nodes[e]}getEdge(e){return this.edges[e]}getNodeList(){return this.nodes}setNodeCoordinates(e,t,s){const i=this.nodes[e];i.x=t,i.y=s}edgeHasAPair(e){return this.nodes[e.getTo()].getAdjacencyList()[e.getFrom()]!==-1}areConnected(e,t){if(e===t)return!0;const s=new Array(this.nodes.length).fill(!1),i=new G(this.numberOfNodes);for(i.enqueue(e),s[e]=!0;!i.isEmpty();){const n=i.dequeue(),a=this.nodes[n],r=a.getAdjacencyList();for(let h=0;h<r.length;h++)if(a.hasNeighbour(h)&&!s[h]){if(h===t)return!0;s[h]=!0,i.enqueue(h)}}return!1}resetGraphToOriginalVisual(){for(const e of this.nodes)e&&e.reset();for(const e of this.edges)e&&e.reset()}clearGraph(){this.nodes.fill(null),this.edges.fill(null),this.i=1,this.numberOfNodes=0}}class T extends R{getEdgeWeight(e){return this.edges[e].getWeight()}modifyWeight(e,t){const s=this.edges[e];s&&s.setWeight(t)}addEdge(e,t,s=!0,i=1){if(e===t||this.nodes[e].hasNeighbour(t))return;let n=this.edges.findIndex(a=>a===null);return n===-1&&(n=this.edges.length),this.nodes[e].addNeighbour(t,n),s&&this.nodes[t].addNeighbour(e,n),this.edges[n]=new L(n,t,e,i),n}}class L{constructor(e,t,s,i){o(this,"id");o(this,"weight");o(this,"to");o(this,"from");o(this,"color","black");o(this,"width",2);this.id=e,this.to=t,this.from=s,this.weight=i}setWeight(e){this.weight=e}getWeight(){return this.weight}getTo(){return this.to}getFrom(){return this.from}getId(){return this.id}reset(){this.color="black",this.width=2}}class z{constructor(e,t){o(this,"id");o(this,"adjacencyList");o(this,"originalLabel");o(this,"label");o(this,"x");o(this,"y");o(this,"color","white");this.label=e,this.originalLabel=e,this.id=t,this.adjacencyList=Array(200).fill(-1)}getId(){return this.id}getAdjacencyList(){return this.adjacencyList}removeNeighbour(e){this.adjacencyList[e]=-1}addNeighbour(e,t){this.adjacencyList[e]=t}hasNeighbour(e){return this.adjacencyList[e]!==-1}reset(){this.label=this.originalLabel,this.color="white"}}class J{constructor(e,t,s=!1,i=!1){o(this,"ctx",m.getContext("2d"));o(this,"isDown",!1);o(this,"dragging",!1);o(this,"isPanning",!1);o(this,"offsetX",0);o(this,"offsetY",0);o(this,"scale",1);o(this,"scaleFactor",.05);o(this,"mousePositionX",0);o(this,"mousePositionY",0);o(this,"nodeSize",30);o(this,"nodeIds",[]);o(this,"mouseNodecenterVectorX",0);o(this,"mouseNodecenterVectorY",0);o(this,"nodeDragging",!1);o(this,"draggedNode",null);o(this,"dpr",1);o(this,"euclideanWeights",!1);o(this,"pendingEdge",!1);o(this,"firstNode",null);o(this,"canvasWidth",0);o(this,"canvasHeight",0);o(this,"selectNodeCallback",null);o(this,"selectEdgeCallback",null);o(this,"canvasBlankClick",null);o(this,"mode","idle");o(this,"graph");o(this,"edgesTwoWay");o(this,"negativeEdges");o(this,"drawCanvas",()=>{this.ctx.clearRect(0,0,m.width,m.height),this.drawEdges(),this.drawNodes(),this.pendingEdge&&(this.drawPendingEdge(),this.drawNode(this.firstNode))});o(this,"wheelEventHandler",e=>{if(e.preventDefault(),this.mode=="disabled")return;this.mousePositionX=e.x,this.mousePositionY=e.y;let t=this.screenToCanvasX(this.mousePositionX),s=this.screenToCanvasY(this.mousePositionY);0<e.deltaY?(this.canvasScaleDown(),this.offsetY+=this.canvasToScreenY(s*this.scaleFactor)-this.offsetY,this.offsetX+=this.canvasToScreenX(t*this.scaleFactor)-this.offsetX):(this.canvasScaleUp(),this.offsetY+=this.offsetY-this.canvasToScreenY(s*this.scaleFactor),this.offsetX+=this.offsetX-this.canvasToScreenX(t*this.scaleFactor)),this.drawCanvas()});o(this,"mouseDownEventHandler",e=>{e.preventDefault(),this.mode!=="disabled"&&(this.mousePositionX=e.x,this.mousePositionY=e.y,this.isDown=!0)});o(this,"mouseMoveEventHandler",e=>{if(e.preventDefault(),this.mode==="disabled"||!this.isDown)return;this.dragging=!0;const t=this.mousePositionX-e.x,s=this.mousePositionY-e.y,i=this.screenToCanvasX(e.x),n=this.screenToCanvasY(e.y);if(this.mousePositionX=e.x,this.mousePositionY=e.y,this.nodeDragging)this.draggedNode.x=i+this.mouseNodecenterVectorX,this.draggedNode.y=n+this.mouseNodecenterVectorY,this.euclideanWeights&&this.updateEuclideanDistancesOfDraggedNode();else{const{node:a,index:r}=this.hitNode(i,n);if(this.mode==="addEdgeMode"&&!this.firstNode&&a&&!this.isPanning){this.firstNode=a,this.pendingEdge=!0,this.drawCanvas();return}else if(this.mode==="addEdgeMode"&&this.firstNode&&!this.isPanning){this.drawCanvas();return}a&&!this.isPanning?(this.draggedNode=a,this.mouseNodecenterVectorX=a.x-i,this.mouseNodecenterVectorY=a.y-n,this.nodeDragging=!0,this.nodeIds.splice(r,1),this.nodeIds.push(a.getId())):(this.offsetX-=t,this.offsetY-=s,this.isPanning=!0)}this.drawCanvas()});o(this,"mouseUpEventHandler",e=>{if(this.mode==="disabled")return;const t=this.screenToCanvasX(e.x),s=this.screenToCanvasY(e.y);if(!this.dragging&&e.target==m){const{node:i,index:n}=this.hitNode(t,s),a=this.hitEdge(t,s);if(this.mode==="addNodeMode"){const r=this.graph.addNode();this.graph.setNodeCoordinates(r,t,s),this.nodeIds.push(r)}else this.mode==="delete"?i?(this.nodeIds.splice(n,1),this.graph.deleteNode(i.getId())):a&&this.graph.removeEdge(a.getFrom(),a.getTo(),this.edgesTwoWay):this.mode==="idle"&&(i?this.selectNodeCallback&&this.selectNodeCallback(i.getId()):a?this.selectEdgeCallback&&this.selectEdgeCallback(a.getId()):this.canvasBlankClick&&this.canvasBlankClick())}else if(this.dragging&&this.mode==="addEdgeMode"){const{node:i}=this.hitNode(t,s);if(i&&this.firstNode){if(this.graph instanceof T){const n=Math.floor(this.measureDistance(this.firstNode.x,this.firstNode.y,i.x,i.y)/10);let a=Math.floor(Math.random()*5)+1;a*=this.negativeEdges&&Math.random()>.8?-1:1;const r=this.euclideanWeights?n:a;this.graph.addEdge(this.firstNode.getId(),i.getId(),this.edgesTwoWay,r)}else this.graph.addEdge(this.firstNode.getId(),i.getId(),this.edgesTwoWay);this.firstNode=null,this.pendingEdge=!1}else this.firstNode=null,this.pendingEdge=!1}this.draggedNode=null,this.nodeDragging=!1,this.dragging=!1,this.isDown=!1,this.isPanning=!1,this.drawCanvas()});this.graph=e,this.euclideanWeights=t,this.edgesTwoWay=s,this.negativeEdges=i,m.addEventListener("mousedown",this.mouseDownEventHandler),m.addEventListener("wheel",this.wheelEventHandler),window.addEventListener("mousemove",this.mouseMoveEventHandler),window.addEventListener("mouseup",this.mouseUpEventHandler),window.addEventListener("load",()=>{this.initCanvasSize(),this.drawCanvas()})}initCanvasSize(){const e=m.getBoundingClientRect();this.dpr=window.devicePixelRatio||1,m.width=Math.round(e.width*this.dpr),m.height=Math.round(e.height*this.dpr),this.canvasWidth=Math.round(e.width),this.canvasHeight=Math.round(e.height),m.style.width=`${Math.round(e.width)}px`,m.style.height=`${Math.round(e.height)}px`,this.ctx.scale(this.dpr,this.dpr)}loadPreset(e,t){const s=new Request(`./graph_presets/${e}/${t}.json`);fetch(s).then(i=>i.json()).then(i=>{this.drawPreset(i)})}deleteElementModeOn(){this.resetToIdle(),this.mode="delete"}addNodeModeOn(){this.resetToIdle(),this.mode="addNodeMode"}disableEverything(){this.resetToIdle(),this.mode="disabled"}addEdgeModeOn(){this.resetToIdle(),this.mode="addEdgeMode"}resetToIdle(){this.mode="idle",this.firstNode=null,this.drawCanvas()}onSelectNode(e){this.selectNodeCallback=e}onSelectEdge(e){this.selectEdgeCallback=e}onCanvasBlankClick(e){this.canvasBlankClick=e}areConnected(e,t){return this.graph.areConnected(e,t)}getLabelOfNode(e){return this.graph.getLabelOfNode(e)}getEdgeWeight(e){return this.graph instanceof T?this.graph.getEdgeWeight(e):0}fitGraphIntoAnimationSpace(){const e=q.clientWidth;let{topLeftX:t,topLeftY:s,width:i,height:n}=this.measureGraphRectangle();const a=this.canvasWidth-e-70,r=this.canvasHeight-50;if(i/a>1){let l=a/i;t*=l,s*=l,n*=l,i*=l,n/r>1&&(l*=r/n,t*=r/n,s*=r/n,i*=r/n,n*=r/n),this.setCanvasScale(this.scale*l)}else n/r>1&&(this.setCanvasScale(this.scale*(r/n)),t*=r/n,s*=r/n,i*=r/n,n*=r/n);const h=e+50,d=(this.canvasHeight-n)/2;this.offsetX=h-t,this.offsetY=d-s,this.drawCanvas()}updateEdge(e){const t=this.graph.getEdge(e.id);e.color&&(t.color=e.color),e.weight&&t.setWeight(e.weight),e.width&&(t.width=e.width),this.drawCanvas()}updateEdges(e){e.forEach(t=>{const s=this.graph.getEdge(t.id);s&&(t.color!==void 0&&(s.color=t.color),t.weight!==void 0&&s.setWeight(t.weight),t.width&&(s.width=t.width))}),this.drawCanvas()}updateNodes(e){e.forEach(t=>{const s=this.graph.getNode(t.id);s&&(t.color!==void 0&&(s.color=t.color),t.label!==void 0&&(s.label=t.label))}),this.drawCanvas()}updateNode(e){const t=this.graph.getNode(e.id);t&&(e.color!==void 0&&(t.color=e.color),e.label!==void 0&&(t.label=e.label),this.drawCanvas())}resetGraphToOriginal(){this.graph.resetGraphToOriginalVisual()}drawPreset(e){this.scale=1,this.nodeSize=30,this.graph.clearGraph(),this.nodeIds=[];for(const t of e.nodes)this.graph.addNodeFromPreset(t.id,t.x,t.y,t.color),this.nodeIds.push(t.id);for(const t of e.edges)this.graph instanceof T?this.graph.addEdge(t.from,t.to,this.edgesTwoWay,t.weight):this.graph.addEdge(t.from,t.to,this.edgesTwoWay);this.fitGraphIntoAnimationSpace()}canvasScaleDown(){if(!(this.scale<.5)){this.scale*=1-this.scaleFactor;for(const e of this.nodeIds){const t=this.graph.getNode(e);t.x=t.x*(1-this.scaleFactor),t.y=t.y*(1-this.scaleFactor)}this.nodeSize*=1-this.scaleFactor}}setCanvasScale(e){for(const t of this.nodeIds){const s=this.graph.getNode(t);s.x=s.x*e/this.scale,s.y=s.y*e/this.scale}this.nodeSize=this.nodeSize*e/this.scale,this.scale=e}canvasScaleUp(){this.scale*=1+this.scaleFactor;for(const e of this.nodeIds){const t=this.graph.getNode(e);t.x=t.x*(1+this.scaleFactor),t.y=t.y*(1+this.scaleFactor)}this.nodeSize*=1+this.scaleFactor}hitNode(e,t){for(let s=this.nodeIds.length-1;s>=0;s--){let i=this.graph.getNode(this.nodeIds[s]);if((i.x-e)**2+(i.y-t)**2<this.nodeSize**2)return{node:i,index:s}}return{node:null,index:0}}measureDistance(e,t,s,i){return Math.sqrt((e-s)**2+(t-i)**2)}drawPendingEdge(){const e=this.firstNode.x,t=this.firstNode.y,s=this.screenToCanvasX(this.mousePositionX),i=this.screenToCanvasY(this.mousePositionY),n=this.measureDistance(e,t,s,i),a=(s-e)/n,r=(i-t)/n,h=e+a*this.nodeSize+a*2,d=t+r*this.nodeSize+r*2;if(this.drawLine(h,d,s,i,2,"black"),!this.edgesTwoWay){this.drawTriangleTo(s+a*2,i+r*2,a,r,"black",!1);return}this.drawArc(s,i,3,0,Math.PI*2,"black",2,"red")}drawEdges(){for(const e of this.graph.getEdgeList())e&&this.drawEdge(e)}drawNodes(){var e;for(const t of this.nodeIds)t!==((e=this.firstNode)==null?void 0:e.getId())&&this.drawNode(this.graph.getNode(t))}screenToCanvasX(e){return e-this.offsetX}screenToCanvasY(e){return e-this.offsetY}canvasToScreenX(e){return e+this.offsetX}canvasToScreenY(e){return e+this.offsetY}drawLine(e,t,s,i,n,a){this.ctx.beginPath(),this.ctx.lineWidth=n,this.ctx.strokeStyle=a,this.ctx.moveTo(this.offsetX+e,this.offsetY+t),this.ctx.lineTo(this.offsetX+s,this.offsetY+i),this.ctx.stroke(),this.ctx.closePath()}drawArc(e,t,s,i,n,a,r,h){this.ctx.beginPath(),this.ctx.lineWidth=r,this.ctx.strokeStyle=a,this.ctx.arc(this.offsetX+e,this.offsetY+t,s,i,n),this.ctx.stroke(),h&&(this.ctx.fillStyle=h,this.ctx.fill()),this.ctx.closePath()}drawText(e,t,s,i,n,a){this.ctx.font=`${i*this.scale}px ${n}`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle=a,this.ctx.fillText(s,this.offsetX+e,this.offsetY+t)}drawNode(e){this.drawArc(e.x,e.y,this.nodeSize,0,Math.PI*2,"black",4,e.color?e.color:"white"),this.drawText(e.x,e.y,`${e.label}`,17,"arial","black")}drawEdge(e){const t=this.graph.getNode(e.getFrom()),s=this.graph.getNode(e.getTo()),i=t.x,n=t.y,a=s.x,r=s.y;if(this.edgesTwoWay)this.drawStraightEdge(i,n,a,r,e.width,e.color,e.getWeight());else if(this.graph.edgeHasAPair(e))this.drawCurvedEdge(i,n,a,r,e.width,e.color,e.getWeight());else{this.drawStraightEdge(i,n,a,r,e.width,e.color,e.getWeight());const h=this.measureDistance(i,n,a,r);let d=(a-i)/h,l=(r-n)/h;d*=h-this.nodeSize-2,l*=h-this.nodeSize-2,this.drawTriangleTo(i+d,n+l,d,l,e.color,!0)}}drawStraightEdge(e,t,s,i,n,a,r){this.drawLine(e,t,s,i,n,a),this.graph instanceof T&&this.drawWeightToHalfLine(e,t,s,i,r,a)}drawCurvedEdge(e,t,s,i,n,a,r){const h=this.measureDistance(e,t,s,i);let d=(s-e)/h,l=(i-t)/h,f=-l,p=d;const N=(e+s)/2,v=(t+i)/2,c=N+f*h,u=v+p*h,E=s-c,y=i-u,I=e-c,M=t-u,S=this.getAngleNormalized(I,-M),A=this.getAngleNormalized(E,-y);let b=Math.min(S,A),w=Math.max(S,A);const C=this.measureDistance(c,u,s,i);if(w-b>Math.PI){const k=w;w=b,b=k}this.drawArc(c,u,C,b,w,a,n),f*=-1,p*=-1,this.drawTriangleTo(c+f*C,u+p*C,d,l,a,!1),this.graph instanceof T&&this.drawWeightToArcMiddle(c,u,C,N-c,v-u,r,a)}getAngleNormalized(e,t){if(e===0)return t<0?Math.PI/2:Math.PI*3/2;if(t===0)return e<0?Math.PI:0;if(e>0){const i=Math.atan(Math.abs(t/e));return t<0?i:Math.PI*2-i}const s=Math.atan(Math.abs(t/e));return t<0?Math.PI-s:Math.PI+s}drawTriangleTo(e,t,s,i,n,a){const r=Math.sqrt(s**2+i**2);a&&(s=s/r,i=i/r);const h=i,d=-s;this.ctx.beginPath(),this.ctx.moveTo(this.offsetX+(e-s*15)+h*8,this.offsetY+(t-i*15)+d*8),this.ctx.lineTo(this.offsetX+(e-s*15)-h*8,this.offsetY+(t-i*15)-d*8),this.ctx.lineTo(this.offsetX+e,this.offsetY+t),this.ctx.closePath(),this.ctx.fillStyle=n,this.ctx.fill()}hitEdge(e,t){for(const s of this.graph.getEdgeList())if(s){const i=this.graph.getNode(s.getFrom()),n=i.x,a=i.y,r=this.graph.getNode(s.getTo()),h=r.x,d=r.y,l=this.graph.edgeHasAPair(s);if(l&&this.checkIfOnArc(e,t,n,a,h,d)||(this.edgesTwoWay||!l)&&this.checkIfOnLine(e,t,n,a,h,d))return s}return null}checkIfOnArc(e,t,s,i,n,a){let r=4;const h=this.measureDistance(s,i,n,a);let d=(n-s)/h,f=-((a-i)/h),p=d;const N=(s+n)/2,v=(i+a)/2,c=N+f*h,u=v+p*h,E=e-c,y=t-u,I=this.getAngleNormalized(E,-y),M=this.getAngleNormalized(s-c,-(i-u)),S=this.getAngleNormalized(n-c,-(a-u));let A=Math.min(M,S),b=Math.max(M,S),w=I>A&&I<b;b-A>Math.PI&&(w=!w);const C=Math.sqrt(E**2+y**2),k=E/C,W=y/C,P=this.measureDistance(c,u,n,a),X=c+k*P,Y=u+W*P;return this.measureDistance(X,Y,e,t)<r&&w}checkIfOnLine(e,t,s,i,n,a){let r=4;const h=n-s,d=a-i,l=h*h+d*d;if(l===0)return(e-s)**2+(t-i)**2<=r**2;let f=((e-s)*h+(t-i)*d)/l;f=Math.max(0,Math.min(1,f));const p=s+f*h,N=i+f*d;return(e-p)**2+(t-N)**2<=r**2}drawWeightToArcMiddle(e,t,s,i,n,a,r){const h=Math.sqrt(i**2+n**2);i=i/h,n=n/h;const d=e+i*(s+15),l=t+n*(s+15);this.drawText(d,l,`${a}`,17,"arial",r||"black")}drawWeightToHalfLine(e,t,s,i,n,a){const r=(e+s)/2,h=(t+i)/2;let d=e-s,l=t-i,f=this.measureDistance(e,t,s,i);d=d/f,l=l/f;let p=-l,N=d;N>0&&(p*=-1,N*=-1);const v=r+p*15,c=h+N*15;this.drawText(v,c,`${n}`,17,"arial",a||"black")}updateEuclideanDistancesOfDraggedNode(){for(const e of this.graph.getEdgeListOfNode(this.draggedNode.getId())){const t=this.graph.getEdge(e),s=this.graph.getNode(t.getFrom()),i=this.graph.getNode(t.getTo());t.setWeight(Math.floor(this.measureDistance(s.x,s.y,i.x,i.y)/10))}}measureGraphRectangle(){let e=1/0,t=-1/0,s=1/0,i=-1/0;for(const n of this.nodeIds){const a=this.graph.getNode(n);a.x<e?e=a.x:a.x>t&&(t=a.x),a.y<s?s=a.y:a.y>i&&(i=a.y)}return{topLeftX:e-this.nodeSize,topLeftY:s-this.nodeSize,width:t-e+this.nodeSize*2,height:i-s+this.nodeSize*2}}}export{Q as A,L as E,R as G,_ as M,J as N,G as Q,T as W};
