var P=Object.defineProperty;var J=(f,e,n)=>e in f?P(f,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):f[e]=n;var c=(f,e,n)=>J(f,typeof e!="symbol"?e+"":e,n);import{m as u,p as A,a as S,b as m,c as w,d as C,s as O,e as p,t as x,w as b,u as B,v as $,x as q,y as M,z as E,f as j,g as W,h as R,i as F,r as Q,j as U,k as V,l as D,n as H,o as T,q as y}from"./common-CHMphJEB.js";import{M as G,W as z,N as K,A as X}from"./Network-256T47_T.js";class Y{constructor(e){c(this,"graph");this.graph=e}createPathHighLightState(e,n,t,r){let i=e,s=this.graph.getNode(t),d={information:`Algorithm finished running!<hr>Shortest path found between ${this.graph.getLabelOfNode(n)} and ${this.graph.getLabelOfNode(t)}.`,dataStructure:{type:"priority-queue",ds:[]}};for(i.algorithmInfobox=d;s!==null;){const a=s.getId(),o=r[a];if(i=this.markNodeAsPartOfPath(i,a),o!==-1){const l=s.getAdjacencyList()[o];i=this.markEdgeAsPartOfPath(i,l),s=this.graph.getNode(o)}else s=null}return i}markNodeAsVisited(e,n){const t=JSON.parse(JSON.stringify(e));return t.nodes[n]&&(t.nodes[n].state="visitedNode"),t}markEdgeAsSelected(e,n){const t=JSON.parse(JSON.stringify(e));return t.edges[n]&&(t.edges[n].state="selectedEdge"),t}markEdgeAsPartOfPath(e,n){const t=JSON.parse(JSON.stringify(e));return t.edges[n]&&(t.edges[n].state="partOfPath"),t}markNodeAsPartOfPath(e,n){const t=JSON.parse(JSON.stringify(e));return t.nodes[n]&&(t.nodes[n].state="partOfPath"),t}markEdgeAsNormal(e,n){const t=JSON.parse(JSON.stringify(e));return t.edges[n]&&(t.edges[n].state="normal"),t}updateNodeLabel(e,n,t){const r=JSON.parse(JSON.stringify(e));return r.nodes[n]&&(r.nodes[n].label=t),r}createInitialState(e){const n=this.graph.getNodeList(),t=this.graph.getEdgeList(),r=Array(n.length).fill(null),i=Array(t.length).fill(null);return n.forEach((s,d)=>{s&&(r[d]={id:d,state:"normal",label:d===e?s.label:`${s.label}(∞)`})}),t.forEach((s,d)=>{s&&(i[d]={id:d,state:"normal",label:`${s.getWeight()}`})}),{nodes:r,edges:i}}getLabelsForQueueRepresentation(e){return e.map(n=>this.graph.getLabelOfNode(n))}Run(e,n){const t=[],r=this.graph.getNodeList(),i=new G(r.length),s=Array(r.length).fill(!1),d=Array(r.length).fill(-1);this.graph.getNodeList().forEach(l=>{l&&l.getId()!==e?i.insert({id:l.getId(),value:1/0}):l&&i.insert({id:l.getId(),value:0})});let a=this.createInitialState(e);a.algorithmInfobox={information:`We assign each node a value of ∞, except for the starting node which will get a value of 0. It denotes the shortest distance known from the source node.
            Inside the loop we retrieve the element with the minimum distance from the priority-queue. With the retrieval the the shortest distance to the node is finalized.
            We also check if a shorter distance is possible through the current node to the adjacent node. If so we update the priority-queue. We repeat this until the destination is retrieved.`},t.push(a);let o=i.extractMin();for(s[o.id]=!0,a=this.markNodeAsVisited(a,o.id),a.algorithmInfobox={information:"Selecting node from priority queue with the smallest distance",dataStructure:{type:"priority-queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(a);o.id!==n;){const l=this.graph.getNode(o.id);let g=null;const N=l.getAdjacencyList();for(let h=0;h<N.length;h++){g!==null&&(a=this.markEdgeAsNormal(a,g));const k=N[h];if(k!==-1&&!s[h]){const L=this.graph.getEdge(k).getWeight(),v=i.get(h).value,I=o.value+L;a=this.markEdgeAsSelected(a,k),a.algorithmInfobox={information:`Checking for adjacent nodes if the distance through the node currently being visited is smaller than the distance previously set.<br> 
                        is it true??:<br>${o.value} + ${L} < ${v==1/0?"∞":v}`,dataStructure:{type:"priority-queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(a),I<v&&(d[h]=o.id,a=this.updateNodeLabel(a,h,`${this.graph.getLabelOfNode(h)}(${I})`),a.algorithmInfobox={information:`distance through current node < current smallest distance to neighbour (${I} < ${v==1/0?"∞":v})`,dataStructure:{type:"priority-queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(a),i.update(h,I)),g=k}}g!==null&&(a=this.markEdgeAsNormal(a,g)),s[o.id]=!0,o=i.extractMin(),a=this.markNodeAsVisited(a,o.id),a.algorithmInfobox={information:"Selecting node from priority queue with the smallest distance",dataStructure:{type:"priority-queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(a)}return t.push(this.createPathHighLightState(a,e,n,d)),t}}class Z{constructor(){c(this,"network");c(this,"selectedEdgeId",null);c(this,"startingNodeId",null);c(this,"destinationNodeId",null);c(this,"canvasState","idle");c(this,"algorithm");c(this,"animation");const e=new z;this.network=new K(e,!1,!0),this.algorithm=new Y(e),this.animation=new X(this.network),this.setUpNetworkEventListeners(),this.setUpUiEventListeners()}changeCanvasState(e){if((this.canvasState==="run-animation"||this.canvasState==="animation-running")&&e!=="idle"&&e!=="animation-running")return;const n=this.canvasState;switch(this.canvasState=e,e){case"add-edge-mode":p("to create an edge click and drag from one node to the other"),this.network.addEdgeModeOn();break;case"add-node-mode":p("click on the canvas to create a node"),this.network.addNodeModeOn();break;case"delete":p("select an element to delete"),this.network.deleteElementModeOn();break;case"idle":(n==="run-animation"||n==="animation-running")&&(this.animation.escapeAnimation(),m(C),m(O)),this.startingNodeId=null,this.destinationNodeId=null,B.textContent="start: ",$.textContent="dest: ",p("idle mode (click on edges to modify weights)"),m(x),m(A),this.network.resetToIdle();break;case"run-animation":p("select starting node"),u(x),b(),this.selectedEdgeId=null,this.network.resetToIdle();break;case"animation-running":u(A),u(S),m(w),u(C),u(O),this.network.fitGraphIntoAnimationSpace(),this.network.disableEverything(),this.animation.start();break}b()}selectNodeHandle(e){if(this.canvasState!=="run-animation")return;if(this.startingNodeId===null){this.startingNodeId=e,p("choose destination node"),B.textContent=`start: ${this.network.getLabelOfNode(this.startingNodeId)}`;return}if(this.destinationNodeId=e,this.destinationNodeId===this.startingNodeId){p("choose destination node");return}if(!this.network.areConnected(this.startingNodeId,this.destinationNodeId)){p("no path from starting node to destination node, choose another destination node");return}$.textContent=`dest: ${this.network.getLabelOfNode(this.destinationNodeId)}`;const t=this.algorithm.Run(this.startingNodeId,this.destinationNodeId);this.animation.setAnimationStates(t),this.changeCanvasState("animation-running")}selectEdgeHandle(e){this.canvasState==="animation-running"||this.canvasState==="run-animation"||this.canvasState==="idle"&&(u(q),this.selectedEdgeId=e,M.textContent="Change weight of the selected edge",E.value=`${this.network.getEdgeWeight(this.selectedEdgeId)}`)}canvasBlankClickHandle(){b()}setUpNetworkEventListeners(){this.selectNodeHandle=this.selectNodeHandle.bind(this),this.selectEdgeHandle=this.selectEdgeHandle.bind(this),this.canvasBlankClickHandle=this.canvasBlankClickHandle.bind(this),this.network.onSelectEdge(this.selectEdgeHandle),this.network.onSelectNode(this.selectNodeHandle),this.network.onCanvasBlankClick(this.canvasBlankClickHandle)}setUpUiEventListeners(){var e,n,t,r,i,s,d,a,o,l,g,N;(e=j)==null||e.addEventListener("click",()=>{this.changeCanvasState("add-edge-mode")}),(n=W)==null||n.addEventListener("click",()=>{this.changeCanvasState("add-node-mode")}),(t=R)==null||t.addEventListener("click",()=>{this.changeCanvasState("delete")}),(r=F)==null||r.addEventListener("click",()=>{this.changeCanvasState("idle")}),(i=Q)==null||i.addEventListener("click",()=>{this.changeCanvasState("run-animation")}),E.addEventListener("input",()=>{const h=Number.parseInt(E.value),k=this.selectedEdgeId;this.network.updateEdge({id:k,weight:h})}),(s=U)==null||s.addEventListener("click",()=>{this.animation.resetAnimation(),m(S),u(w)}),(d=S)==null||d.addEventListener("click",()=>{this.animation.pause(),m(S),u(w)}),(a=V)==null||a.addEventListener("click",()=>{this.animation.setAnimationStateForward(),this.animation.animateCurrentState()}),(o=D)==null||o.addEventListener("click",()=>{this.animation.setAnimationStateBackward(),this.animation.animateCurrentState()}),(l=w)==null||l.addEventListener("click",()=>{this.animation.continueAnimation(),m(w),u(S)}),(g=H)==null||g.addEventListener("input",()=>{let h=Number.parseInt(H.value);T.textContent=`speed: ${h}x`,this.animation.setAnimationSpeedChange(1e3/h)}),(N=y)==null||N.addEventListener("input",()=>{y.value!=="load a graph"&&this.canvasState!=="run-animation"&&this.canvasState!=="animation-running"&&this.network.loadPreset("dijkstra",y.value)})}}new Z;
