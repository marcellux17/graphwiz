var E=Object.defineProperty;var y=(d,e,t)=>e in d?E(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var h=(d,e,t)=>y(d,typeof e!="symbol"?e+"":e,t);import{m as u,p as b,a as g,b as l,c as m,d as L,s as w,e as p,f as I,g as q,h as B,i as O,r as C,j as x,k as J,l as Q,n as A,o as F,q as f}from"./common-CHMphJEB.js";import{Q as R,G as M,N as U,A as $}from"./Network-256T47_T.js";class H{constructor(e){h(this,"graph");this.graph=e}markNodeAsVisited(e,t){const a=JSON.parse(JSON.stringify(e));return a.nodes[t]&&(a.nodes[t].state="visitedNode"),a}markEdgeAsSelected(e,t){const a=JSON.parse(JSON.stringify(e));return a.edges[t]&&(a.edges[t].state="selectedEdge"),a}markNodeAsInQueue(e,t){const a=JSON.parse(JSON.stringify(e));return a.nodes[t]&&(a.nodes[t].state="inQueue"),a}markEdgeAsNormal(e,t){const a=JSON.parse(JSON.stringify(e));return a.edges[t]&&(a.edges[t].state="normal"),a}createInitialState(){const e=this.graph.getNodeList(),t=this.graph.getEdgeList(),a=t.length,i=Array(e.length).fill(null),r=Array(a).fill(null);return e.forEach((n,s)=>{n&&(i[s]={id:s,state:"normal",label:`${n.label}`})}),t.forEach((n,s)=>{n&&(r[s]={id:s,state:"normal",label:`${n.getWeight()}`})}),{nodes:i,edges:r}}getLabelsForQueueRepresentation(e){return e.map(t=>this.graph.getLabelOfNode(t))}Run(e){const t=[],a=this.graph.getNodeList(),i=new R(a.length),r=Array(a.length).fill(!1);let n=this.createInitialState();for(n=this.markNodeAsVisited(n,e),n.algorithmInfobox={information:"Starting node has been put in queue to run bfs."},t.push(n),r[e]=!0,i.enqueue(e);!i.isEmpty();){n=JSON.parse(JSON.stringify(n)),n.algorithmInfobox={information:"Selecting node from queue.<hr>calling Dequeue()",dataStructure:{type:"queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(n);const s=i.dequeue();n=this.markNodeAsVisited(n,s),n.algorithmInfobox={information:`Selecting node from queue: (${this.graph.getLabelOfNode(s)}).`,dataStructure:{type:"queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(n);const c=this.graph.getNode(s).getAdjacencyList();for(let o=0;o<a.length;o++)c[o]!==-1&&(n=this.markEdgeAsSelected(n,c[o]),n.algorithmInfobox={information:"Checking whether neighbour has been visited yet or in queue.",dataStructure:{type:"queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(n),r[o]||(r[o]=!0,i.enqueue(o),n=this.markNodeAsInQueue(n,o),n.algorithmInfobox={information:`neighbour of ${this.graph.getLabelOfNode(s)} hasn't yet been visited and currently not in queue.<hr>putting it in queue.`,dataStructure:{type:"queue",ds:this.getLabelsForQueueRepresentation(i.toArray())}},t.push(n)),n=this.markEdgeAsNormal(n,c[o]))}return n.algorithmInfobox={information:"Algorithm finished running!<hr> All nodes reachable from starting node have been visited since the queue is empty!"},t.push(n),t}}class V{constructor(){h(this,"network");h(this,"startingNodeId",null);h(this,"canvasState","idle");h(this,"animation");h(this,"algorithm");const e=new M;this.network=new U(e,!1,!0,!1),this.animation=new $(this.network),this.algorithm=new H(e),this.setUpNetworkEventListeners(),this.setUpUiEventListeners()}changeCanvasState(e){if((this.canvasState==="run-animation"||this.canvasState==="animation-running")&&e!=="idle"&&e!=="animation-running")return;const t=this.canvasState;switch(this.canvasState=e,e){case"add-edge-mode":p("to create an edge click and drag from one node to the other"),this.network.addEdgeModeOn();break;case"add-node-mode":p("click on the canvas to create a node"),this.network.addNodeModeOn();break;case"delete":p("select an element to delete"),this.network.deleteElementModeOn();break;case"idle":(t==="run-animation"||t==="animation-running")&&(this.animation.escapeAnimation(),l(L),l(w)),this.startingNodeId=null,p("idle mode (click on edges to modify weights)"),l(b),this.network.resetToIdle();break;case"run-animation":p("select starting node"),this.network.resetToIdle();break;case"animation-running":u(b),u(g),l(m),u(L),u(w),this.network.fitGraphIntoAnimationSpace(),this.network.disableEverything(),this.animation.start();break}}selectNodeHandle(e){if(this.canvasState!=="run-animation")return;this.startingNodeId=e;const t=this.algorithm.Run(this.startingNodeId);this.animation.setAnimationStates(t),this.changeCanvasState("animation-running")}setUpNetworkEventListeners(){this.selectNodeHandle=this.selectNodeHandle.bind(this),this.network.onSelectNode(this.selectNodeHandle)}setUpUiEventListeners(){var e,t,a,i,r,n,s,c,o,S,k,v;(e=I)==null||e.addEventListener("click",()=>{this.changeCanvasState("add-edge-mode")}),(t=q)==null||t.addEventListener("click",()=>{this.changeCanvasState("add-node-mode")}),(a=B)==null||a.addEventListener("click",()=>{this.changeCanvasState("delete")}),(i=O)==null||i.addEventListener("click",()=>{this.changeCanvasState("idle")}),(r=C)==null||r.addEventListener("click",()=>{this.changeCanvasState("run-animation")}),(n=x)==null||n.addEventListener("click",()=>{this.animation.resetAnimation(),l(g),u(m)}),(s=g)==null||s.addEventListener("click",()=>{this.animation.pause(),l(g),u(m)}),(c=J)==null||c.addEventListener("click",()=>{this.animation.setAnimationStateForward(),this.animation.animateCurrentState()}),(o=Q)==null||o.addEventListener("click",()=>{this.animation.setAnimationStateBackward(),this.animation.animateCurrentState()}),(S=m)==null||S.addEventListener("click",()=>{this.animation.continueAnimation(),l(m),u(g)}),(k=A)==null||k.addEventListener("input",()=>{let N=Number.parseInt(A.value);F.textContent=`speed: ${N}x`,this.animation.setAnimationSpeedChange(1e3/N)}),(v=f)==null||v.addEventListener("input",()=>{f.value!=="load a graph"&&this.canvasState!=="run-animation"&&this.canvasState!=="animation-running"&&this.network.loadPreset("bfs",f.value)})}}new V;
