var O=Object.defineProperty;var y=(d,e,n)=>e in d?O(d,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):d[e]=n;var o=(d,e,n)=>y(d,typeof e!="symbol"?e+"":e,n);import{m as l,p as b,a as g,b as c,c as m,d as I,s as A,u as x,v as P,e as f,t as J,w as C,x as W,y as H,z as p,f as M,g as T,h as U,i as F,r as $,j as D,k as G,l as R,n as N,o as j,q as k}from"./common-CHMphJEB.js";import{E as B,W as K,N as V,A as q}from"./Network-256T47_T.js";class Q{constructor(e){o(this,"parent");o(this,"rank");this.parent=Array(e).fill(0),this.rank=Array(e).fill(0);for(let n=0;n<e;n++)this.parent[n]=n,this.rank[n]=0}find(e){return this.parent[e]!==e&&(this.parent[e]=this.find(this.parent[e])),this.parent[e]}union(e,n){const t=this.find(e),i=this.find(n);t!=i&&(this.rank[t]<this.rank[i]?this.parent[t]=i:this.rank[t]>this.rank[i]?this.parent[i]=t:(this.parent[i]=t,this.rank[t]++))}}class X{constructor(e){o(this,"graph");this.graph=e}markEdgeAsSelected(e,n){const t=JSON.parse(JSON.stringify(e));return t.edges[n]&&(t.edges[n].state="selectedEdge"),t}markEdgeAsPartOfPath(e,n){const t=JSON.parse(JSON.stringify(e));return t.edges[n]&&(t.edges[n].state="partOfPath"),t}markNodeAsPartOfPath(e,n){const t=JSON.parse(JSON.stringify(e));return t.nodes[n]&&(t.nodes[n].state="partOfPath"),t}markEdgeAsDeselected(e,n){const t=JSON.parse(JSON.stringify(e));return t.edges[n]&&(t.edges[n].state="deselectedEdge"),t}createInitialState(){const e=this.graph.getNodeList(),n=this.graph.getEdgeList(),t=Array(e.length).fill(null),i=Array(n.length).fill(null);return e.forEach((a,r)=>{a&&(t[r]={id:r,state:"normal",label:a.label})}),n.forEach((a,r)=>{a&&(i[r]={id:r,state:"normal",label:`${a.getWeight()}`})}),{nodes:t,edges:i}}Run(){const e=[],n=this.graph.getEdgeList().map(s=>s instanceof B?new B(s.getId(),s.getTo(),s.getFrom(),s.getWeight()):null).sort((s,h)=>s===null?1:h===null?-1:s.getWeight()-h.getWeight());let t=this.createInitialState();t.algorithmInfobox={information:"We first sort the edges in ascending order by their weight."},e.push(t);const i=new Q(n.length);let a=0,r=0;for(;n[a]!==null;){const s=i.find(n[a].getFrom()),h=i.find(n[a].getTo());t=this.markEdgeAsSelected(t,n[a].getId()),t.algorithmInfobox={information:"We check if the selected edge forms a cycle, if so we don't include it in the spanning tree, otherwise we include it."},e.push(t),s!==h?(i.union(s,h),t=this.markEdgeAsPartOfPath(t,n[a].getId()),t=this.markNodeAsPartOfPath(t,n[a].getFrom()),t=this.markNodeAsPartOfPath(t,n[a].getTo()),t.algorithmInfobox={information:"The selected edge does not form a cycle. It will be part of the minimum spanning tree."},e.push(t),r+=n[a].getWeight()):(t=this.markEdgeAsDeselected(t,n[a].getId()),t.algorithmInfobox={information:"The selected edge does form a cycle as both nodes connected by the edge are in the same component. It will be part of the minimum spanning tree."},e.push(t)),a++}return t=JSON.parse(JSON.stringify(t)),t.algorithmInfobox={information:`Algorithm finished running!<hr>Minimum spanning tree of the weighted graph has been created with a total weight of: ${r}.`},e.push(t),e}}class Y{constructor(){o(this,"network");o(this,"selectedEdgeId",null);o(this,"canvasState","idle");o(this,"algorithm");o(this,"animation");const e=new K;this.network=new V(e,!1,!0),this.algorithm=new X(e),this.animation=new q(this.network),this.setUpNetworkEventListeners(),this.setUpUiEventListeners()}changeCanvasState(e){if(this.canvasState==="animation-running"&&e!=="idle")return;const n=this.canvasState;switch(this.canvasState=e,e){case"add-edge-mode":f("to create an edge click and drag from one node to the other"),this.network.addEdgeModeOn();break;case"add-node-mode":f("click on the canvas to create a node"),this.network.addNodeModeOn();break;case"delete":f("select an element to delete"),this.network.deleteElementModeOn();break;case"idle":n==="animation-running"&&(this.animation.escapeAnimation(),c(I),c(A)),x.textContent="start: ",P.textContent="dest: ",f("idle mode (click on edges to modify weights)"),c(J),c(b),this.network.resetToIdle();break;case"animation-running":l(b),l(g),c(m),l(I),l(A),this.network.fitGraphIntoAnimationSpace(),this.network.disableEverything();const t=this.algorithm.Run();this.animation.setAnimationStates(t),this.animation.start();break}C()}selectEdgeHandle(e){this.canvasState==="animation-running"||this.canvasState!=="idle"||(l(W),this.selectedEdgeId=e,H.textContent="Change weight of the selected edge",p.value=`${this.network.getEdgeWeight(this.selectedEdgeId)}`)}canvasBlankClickHandle(){C()}setUpNetworkEventListeners(){this.selectEdgeHandle=this.selectEdgeHandle.bind(this),this.canvasBlankClickHandle=this.canvasBlankClickHandle.bind(this),this.network.onSelectEdge(this.selectEdgeHandle),this.network.onCanvasBlankClick(this.canvasBlankClickHandle)}setUpUiEventListeners(){var e,n,t,i,a,r,s,h,E,w,v,S;(e=M)==null||e.addEventListener("click",()=>{this.changeCanvasState("add-edge-mode")}),(n=T)==null||n.addEventListener("click",()=>{this.changeCanvasState("add-node-mode")}),(t=U)==null||t.addEventListener("click",()=>{this.changeCanvasState("delete")}),(i=F)==null||i.addEventListener("click",()=>{this.changeCanvasState("idle")}),(a=$)==null||a.addEventListener("click",()=>{this.changeCanvasState("animation-running")}),p.addEventListener("input",()=>{const u=Number.parseInt(p.value),L=this.selectedEdgeId;this.network.updateEdge({id:L,weight:u})}),(r=D)==null||r.addEventListener("click",()=>{this.animation.resetAnimation(),c(g),l(m)}),(s=g)==null||s.addEventListener("click",()=>{this.animation.pause(),c(g),l(m)}),(h=G)==null||h.addEventListener("click",()=>{this.animation.setAnimationStateForward(),this.animation.animateCurrentState()}),(E=R)==null||E.addEventListener("click",()=>{this.animation.setAnimationStateBackward(),this.animation.animateCurrentState()}),(w=m)==null||w.addEventListener("click",()=>{this.animation.continueAnimation(),c(m),l(g)}),(v=N)==null||v.addEventListener("input",()=>{let u=Number.parseInt(N.value);j.textContent=`speed: ${u}x`,this.animation.setAnimationSpeedChange(1e3/u)}),(S=k)==null||S.addEventListener("input",()=>{k.value!=="load a graph"&&this.canvasState!=="animation-running"&&this.network.loadPreset("kruskal",k.value)})}}new Y;
