var $=Object.defineProperty;var H=(v,t,n)=>t in v?$(v,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):v[t]=n;var c=(v,t,n)=>H(v,typeof t!="symbol"?t+"":t,n);import{m as u,p as L,a as S,b as p,c as w,d as O,s as A,e as m,t as C,w as I,u as y,v as B,x as J,y as P,z as E,f as F,g as T,h as M,i as U,r as W,j as V,k as G,l as R,n as x,o as j,q as b}from"./common-CHMphJEB.js";import{W as q,N as z,A as D}from"./Network-256T47_T.js";class K{constructor(t){c(this,"graph");this.graph=t}createPathHighLightState(t,n,e,d,i){let r=t,o=this.graph.getNode(e);for(r.algorithmInfobox={information:`Algorithm finished running!<hr>Shortest path found between ${this.graph.getLabelOfNode(n)} and ${this.graph.getLabelOfNode(e)}.`};o!==null;){const a=o.getId(),g=d[a];if(r=this.markNodeAsPartOfPath(r,a),g!==-1){const f=i[a];r=this.markEdgeAsPartOfPath(r,f),o=this.graph.getNode(g)}else o=null}return r}markNodeAsVisited(t,n){const e=JSON.parse(JSON.stringify(t));return e.nodes[n]&&(e.nodes[n].state="visitedNode"),e}markEdgeAsSelected(t,n){const e=JSON.parse(JSON.stringify(t));return e.edges[n]&&(e.edges[n].state="selectedEdge"),e}markEdgeAsPartOfPath(t,n){const e=JSON.parse(JSON.stringify(t));return e.edges[n]&&(e.edges[n].state="partOfPath"),e}markNodeAsPartOfPath(t,n){const e=JSON.parse(JSON.stringify(t));return e.nodes[n]&&(e.nodes[n].state="partOfPath"),e}markEdgeAsNormal(t,n){const e=JSON.parse(JSON.stringify(t));return e.edges[n]&&(e.edges[n].state="normal"),e}updateNodeLabel(t,n,e){const d=JSON.parse(JSON.stringify(t));return d.nodes[n]&&(d.nodes[n].label=e),d}createInitialState(t){const n=this.graph.getNodeList(),e=this.graph.getEdgeList(),d=e.length,i=Array(n.length).fill(null),r=Array(d).fill(null);return n.forEach((o,a)=>{o&&(i[a]={id:a,state:"normal",label:a===t?o.label:`${o.label}(∞)`})}),e.forEach((o,a)=>{o&&(r[a]={id:a,state:"normal",label:`${o.getWeight()}`})}),{nodes:i,edges:r}}Run(t,n){const e=[],d=this.graph.getNodeList(),i=Array(d.length).fill(1/0),r=Array(d.length).fill(-1),o=Array(d.length).fill(-1);i[t]=0;let a=this.createInitialState(t);a.algorithmInfobox={information:`<h4>edge relaxation:</h4>we iterate over all the edges e(u, v)<br> at most |V| - 1 times to see if the shortest path length to v can be improved via u.
                <br>(All paths originate from the start node)`},e.push(a),a=this.markNodeAsVisited(a,t);let g=!0,f=0;for(;f<=this.graph.getNumberOfNodes()-1&&g;){g=!1,a.algorithmInfobox={information:`<h4>${f}. edge relaxation:</h4>
                we iterate over all the edges e(u, v) to see if we can update path lengths.`},e.push(a);let h=null;for(const l of this.graph.getEdgeList()){if(!l)continue;const s=l.getTo(),N=l.getFrom();if(i[N]!==1/0){const k=i[N]+l.getWeight();a=this.markEdgeAsSelected(a,l.getId()),h=l.getId(),a.algorithmInfobox={information:`<h4>checking:</h4> is distance to v through u smaller than the current estimate to v?
                        <br>u label: ${this.graph.getLabelOfNode(N)}
                        <br>v label: ${this.graph.getLabelOfNode(s)}
                        <hr>does this hold?<br>d[u] + w(e) < d[v]`},e.push(a),k<i[s]?(a=this.updateNodeLabel(a,s,`${this.graph.getLabelOfNode(s)}(${k})`),a.algorithmInfobox={information:`it holds: (${k} < ${i[s]==1/0?"∞":i[s]})
                            <hr>d[u] + w(e) < d[v]`},r[s]=N,o[s]=l.getId(),i[s]=k,e.push(a),g=!0):(a=JSON.parse(JSON.stringify(a)),a.algorithmInfobox={information:`it does not hold: (${k} < ${i[s]==1/0?"∞":i[s]})
                            <hr>d[u] + w(e) > d[v]`},e.push(a))}h!==null&&(a=this.markEdgeAsNormal(a,h),h=null)}f++}for(const h of this.graph.getEdgeList()){if(!h)continue;const l=h.getTo(),s=h.getFrom();if(i[s]!==1/0&&i[s]+h.getWeight()<i[l])return[]}return e.push(this.createPathHighLightState(a,t,n,r,o)),e}}class Q{constructor(){c(this,"network");c(this,"selectedEdgeId",null);c(this,"startingNodeId",null);c(this,"destinationNodeId",null);c(this,"canvasState","idle");c(this,"animation");c(this,"algorithm");const t=new q;this.network=new z(t,!1,!1,!0),this.animation=new D(this.network),this.algorithm=new K(t),this.setUpNetworkEventListeners(),this.setUpUiEventListeners()}changeCanvasState(t){if((this.canvasState==="run-animation"||this.canvasState==="animation-running")&&t!=="idle"&&t!=="animation-running")return;const n=this.canvasState;switch(this.canvasState=t,t){case"add-edge-mode":m("to create an edge click and drag from one node to the other"),this.network.addEdgeModeOn();break;case"add-node-mode":m("click on the canvas to create a node"),this.network.addNodeModeOn();break;case"delete":m("select an element to delete"),this.network.deleteElementModeOn();break;case"idle":(n==="run-animation"||n==="animation-running")&&(this.animation.escapeAnimation(),p(O),p(A)),this.startingNodeId=null,this.destinationNodeId=null,y.textContent="start: ",B.textContent="dest: ",m("idle mode (click on edges to modify weights)"),p(C),p(L),this.network.resetToIdle();break;case"run-animation":m("select starting node"),u(C),I(),this.selectedEdgeId=null,this.network.resetToIdle();break;case"animation-running":u(L),u(S),p(w),u(O),u(A),this.network.fitGraphIntoAnimationSpace(),this.network.disableEverything(),this.animation.start();break}I()}selectNodeHandle(t){if(this.canvasState!=="run-animation")return;if(this.startingNodeId===null){this.startingNodeId=t,m("choose destination node"),y.textContent=`start: ${this.network.getLabelOfNode(this.startingNodeId)}`;return}if(this.destinationNodeId=t,this.destinationNodeId===this.startingNodeId){m("choose destination node");return}if(!this.network.areConnected(this.startingNodeId,this.destinationNodeId)){m("no path from starting node to destination node, choose another destination node");return}B.textContent=`dest: ${this.network.getLabelOfNode(this.destinationNodeId)}`;const e=this.algorithm.Run(this.startingNodeId,this.destinationNodeId);if(e.length===0){m("graph contains negative cycle(s), change graph to run algorithm"),setTimeout(()=>{this.changeCanvasState("idle")},1500);return}this.animation.setAnimationStates(e),this.changeCanvasState("animation-running")}selectEdgeHandle(t){this.canvasState==="animation-running"||this.canvasState==="run-animation"||this.canvasState==="idle"&&(u(J),this.selectedEdgeId=t,P.textContent="Change weight of the selected edge",E.value=`${this.network.getEdgeWeight(this.selectedEdgeId)}`)}canvasBlankClickHandle(){I()}setUpNetworkEventListeners(){this.selectNodeHandle=this.selectNodeHandle.bind(this),this.selectEdgeHandle=this.selectEdgeHandle.bind(this),this.canvasBlankClickHandle=this.canvasBlankClickHandle.bind(this),this.network.onSelectEdge(this.selectEdgeHandle),this.network.onSelectNode(this.selectNodeHandle),this.network.onCanvasBlankClick(this.canvasBlankClickHandle)}setUpUiEventListeners(){var t,n,e,d,i,r,o,a,g,f,h,l;(t=F)==null||t.addEventListener("click",()=>{this.changeCanvasState("add-edge-mode")}),(n=T)==null||n.addEventListener("click",()=>{this.changeCanvasState("add-node-mode")}),(e=M)==null||e.addEventListener("click",()=>{this.changeCanvasState("delete")}),(d=U)==null||d.addEventListener("click",()=>{this.changeCanvasState("idle")}),(i=W)==null||i.addEventListener("click",()=>{this.changeCanvasState("run-animation")}),E.addEventListener("input",()=>{const s=Number.parseInt(E.value),N=this.selectedEdgeId;this.network.updateEdge({id:N,weight:s})}),(r=V)==null||r.addEventListener("click",()=>{this.animation.resetAnimation(),p(S),u(w)}),(o=S)==null||o.addEventListener("click",()=>{this.animation.pause(),p(S),u(w)}),(a=G)==null||a.addEventListener("click",()=>{this.animation.setAnimationStateForward(),this.animation.animateCurrentState()}),(g=R)==null||g.addEventListener("click",()=>{this.animation.setAnimationStateBackward(),this.animation.animateCurrentState()}),(f=w)==null||f.addEventListener("click",()=>{this.animation.continueAnimation(),p(w),u(S)}),(h=x)==null||h.addEventListener("input",()=>{let s=Number.parseInt(x.value);j.textContent=`speed: ${s}x`,this.animation.setAnimationSpeedChange(1e3/s)}),(l=b)==null||l.addEventListener("input",()=>{b.value!=="load a graph"&&this.canvasState!=="run-animation"&&this.canvasState!=="animation-running"&&this.network.loadPreset("bellmanford",b.value)})}}new Q;
