var A=Object.defineProperty;var y=(d,t,e)=>t in d?A(d,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[t]=e;var c=(d,t,e)=>y(d,typeof t!="symbol"?t+"":t,e);import{m as l,p as b,a as m,b as g,c as u,d as L,s as w,e as p,f as I,g as O,h as B,i as C,r as x,j as J,k as F,l as R,n as E,o as M,q as k}from"./common-CHMphJEB.js";import{G as U,N as $,A as H}from"./Network-256T47_T.js";class P{constructor(t){c(this,"graph");this.graph=t}markNodeAsVisited(t,e){const n=JSON.parse(JSON.stringify(t));return n.nodes[e]&&(n.nodes[e].state="visitedNode"),n}markNodeAsInStack(t,e){const n=JSON.parse(JSON.stringify(t));return n.nodes[e]&&(n.nodes[e].state="inStack"),n}markEdgeAsSelected(t,e){const n=JSON.parse(JSON.stringify(t));return n.edges[e]&&(n.edges[e].state="selectedEdge"),n}markEdgeAsNormal(t,e){const n=JSON.parse(JSON.stringify(t));return n.edges[e]&&(n.edges[e].state="normal"),n}createInitialState(){const t=this.graph.getNodeList(),e=this.graph.getEdgeList(),n=e.length,r=Array(t.length).fill(null),s=Array(n).fill(null);return t.forEach((a,o)=>{a&&(r[o]={id:o,state:"normal",label:`${a.label}`})}),e.forEach((a,o)=>{a&&(s[o]={id:o,state:"normal",label:`${a.getWeight()}`})}),{nodes:r,edges:s}}getLabelsForStackRepresentation(t){return t.map(e=>this.graph.getLabelOfNode(e))}Run(t){const e=[],n=this.graph.getNodeList(),r=Array(n.length).fill(!1),s=[];s.push(t),r[t]=!0;let a=this.createInitialState();for(a=this.markNodeAsInStack(a,t),a.algorithmInfobox={information:"Putting the starting node in stack for dfs to run.",dataStructure:{type:"stack",ds:this.getLabelsForStackRepresentation(s)}},e.push(a);s.length>0;){a=JSON.parse(JSON.stringify(a)),a.algorithmInfobox={information:"Pop() method called on stack to retrieve top element.",dataStructure:{type:"stack",ds:this.getLabelsForStackRepresentation(s)}},e.push(a);const o=s.pop();a=this.markNodeAsVisited(a,o),a.algorithmInfobox={information:`Pop() method called on stack to retrieve top element: (${this.graph.getLabelOfNode(o)}).`,dataStructure:{type:"stack",ds:this.getLabelsForStackRepresentation(s)}},e.push(a);const h=this.graph.getNode(o).getAdjacencyList();for(let i=0;i<h.length;i++)h[i]!==-1&&(a=this.markEdgeAsSelected(a,h[i]),a.algorithmInfobox={information:"Checking if neighbour of the current node is already in stack or has been visited.",dataStructure:{type:"stack",ds:this.getLabelsForStackRepresentation(s)}},e.push(a),r[i]||(s.push(i),r[i]=!0,a=this.markNodeAsInStack(a,i),a.algorithmInfobox={information:`Node (${this.graph.getLabelOfNode(i)}) hasn't been visited and not in stack:<br>pushing it onto the stack.`,dataStructure:{type:"stack",ds:this.getLabelsForStackRepresentation(s)}},e.push(a)),a=this.markEdgeAsNormal(a,h[i]))}return a.algorithmInfobox={information:"Algorithm finished running!<hr> All nodes reachable from starting node have been visited since the stack is empty!"},e.push(a),e}}class j{constructor(){c(this,"network");c(this,"startingNodeId",null);c(this,"canvasState","idle");c(this,"animation");c(this,"algorithm");const t=new U;this.network=new $(t,!1,!0,!1),this.animation=new H(this.network),this.algorithm=new P(t),this.setUpNetworkEventListeners(),this.setUpUiEventListeners()}changeCanvasState(t){if((this.canvasState==="run-animation"||this.canvasState==="animation-running")&&t!=="idle"&&t!=="animation-running")return;const e=this.canvasState;switch(this.canvasState=t,t){case"add-edge-mode":p("to create an edge click and drag from one node to the other"),this.network.addEdgeModeOn();break;case"add-node-mode":p("click on the canvas to create a node"),this.network.addNodeModeOn();break;case"delete":p("select an element to delete"),this.network.deleteElementModeOn();break;case"idle":(e==="run-animation"||e==="animation-running")&&(this.animation.escapeAnimation(),g(L),g(w)),this.startingNodeId=null,p("idle mode (click on edges to modify weights)"),g(b),this.network.resetToIdle();break;case"run-animation":p("select starting node"),this.network.resetToIdle();break;case"animation-running":l(b),l(m),g(u),l(L),l(w),this.network.fitGraphIntoAnimationSpace(),this.network.disableEverything(),this.animation.start();break}}selectNodeHandle(t){if(this.canvasState!=="run-animation")return;this.startingNodeId=t;const e=this.algorithm.Run(this.startingNodeId);this.animation.setAnimationStates(e),this.changeCanvasState("animation-running")}setUpNetworkEventListeners(){this.selectNodeHandle=this.selectNodeHandle.bind(this),this.network.onSelectNode(this.selectNodeHandle)}setUpUiEventListeners(){var t,e,n,r,s,a,o,h,i,S,f,v;(t=I)==null||t.addEventListener("click",()=>{this.changeCanvasState("add-edge-mode")}),(e=O)==null||e.addEventListener("click",()=>{this.changeCanvasState("add-node-mode")}),(n=B)==null||n.addEventListener("click",()=>{this.changeCanvasState("delete")}),(r=C)==null||r.addEventListener("click",()=>{this.changeCanvasState("idle")}),(s=x)==null||s.addEventListener("click",()=>{this.changeCanvasState("run-animation")}),(a=J)==null||a.addEventListener("click",()=>{this.animation.resetAnimation(),g(m),l(u)}),(o=m)==null||o.addEventListener("click",()=>{this.animation.pause(),g(m),l(u)}),(h=F)==null||h.addEventListener("click",()=>{this.animation.setAnimationStateForward(),this.animation.animateCurrentState()}),(i=R)==null||i.addEventListener("click",()=>{this.animation.setAnimationStateBackward(),this.animation.animateCurrentState()}),(S=u)==null||S.addEventListener("click",()=>{this.animation.continueAnimation(),g(u),l(m)}),(f=E)==null||f.addEventListener("input",()=>{let N=Number.parseInt(E.value);M.textContent=`speed: ${N}x`,this.animation.setAnimationSpeedChange(1e3/N)}),(v=k)==null||v.addEventListener("input",()=>{k.value!=="load a graph"&&this.canvasState!=="run-animation"&&this.canvasState!=="animation-running"&&this.network.loadPreset("dfs",k.value)})}}new j;
